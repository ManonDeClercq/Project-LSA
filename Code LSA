---
title: "GroupProjectMarkdown"
output: html_document
date: "2024-11-21"
---
Installation and calling of packages
```{r}
install.packages("tidyverse")
install.packages("readxl")
install.packages("visdat")
install.packages("naniar")
install.packages("imputeTS")
library(readxl)
library(tidyverse)
library(visdat)
library(naniar)
library(imputeTS)
```


Reading file metadata as CSV and conversion of abundances excel to TSV
```{r}
metadata_csv_raw <- read_csv("metadata.csv")

abundances <- read_excel("abundances.xlsx", sheet = 1)
write.table(abundances, file = "abundances.tsv", sep = "\t", row.names = FALSE, quote = FALSE)
abundances_tsv_raw <- read_tsv("abundances.tsv")
```


Check class of files
```{r}
class(abundances_tsv_raw) #spec_tbl_df / tbl_df / tbl / data.frame
class(metadata_csv_raw) #spec_tbl_df / tbl_df / tbl / data.frame
```


Exploring data + checking for missing data
```{r}
summary(metadata_csv_raw) #min and max 0 means 1 value: HCV, HBV, lymphatic_metastasis, macrovascular_invasion, profiling_data_QC_status, BCLC
summary(abundances_tsv_raw)
str(metadata_csv_raw)
str(abundances_tsv_raw)


#Check for missing values 
library(visdat) 
vis_miss(metadata_csv_raw) #missing values in Tumor_cellularity_(%) (0.5% missing) 
vis_miss(abundances_tsv_raw) #missing values (22.9% missing)

gg_miss_var(metadata_csv_raw)  
gg_miss_var(abundances_tsv_raw)


#Count missing values in metadata
na_count <- sum(is.na(metadata_csv_raw$`Tumor_cellularity_(%)`))
na_count #there are 10 missing values out of 101 values

#Check which ID's are associated with these NA's
na_indices <- which(is.na(metadata_csv_raw$`Tumor_cellularity_(%)`))
na_ids <- metadata_csv_raw$ID[na_indices]
na_ids

#Effective removal of missing continued later during cleaning
```


Data cleaning + new files
```{r}
#Change BCLC_(stage) to BCLC because brackets could give problems with the code
colnames(metadata_csv_raw)[colnames(metadata_csv_raw) == "BCLC_(stage)"] <- "BCLC"

#Change Diameter_of_tumor_(cm) to Diameter_of_tumor because brackets could give problems with the code
colnames(metadata_csv_raw)[colnames(metadata_csv_raw) == "Diameter_of_tumor_(cm)"] <- "Diameter_of_tumor" 

#Change AFP(>200_ng/ml)(cm) to AFP because brackets could give problems with the code
colnames(metadata_csv_raw)[colnames(metadata_csv_raw) == "AFP(>200_ng/ml)"] <- "AFP"

#change Tumor_cellularity_(%) to Tumor_cellularity because brackets could give problems with the code
colnames(metadata_csv_clean)[colnames(metadata_csv_clean) == "Tumor_cellularity_(%)"] <- "Tumor_cellularity"

#change AFP_(ng/ml) to AFPcontinuous because brackets could give problems with the code
colnames(metadata_csv_clean_stand)[colnames(metadata_csv_clean_stand) == "AFP_(ng/ml)"] <- "AFPcontinuous"

#change Disease_free_survival_(m) to Disease_free_survival because brackets could give problems with the code
colnames(metadata_csv_clean_stand)[colnames(metadata_csv_clean_stand) == "Disease_free_survival_(m)"] <- "Disease_free_survival" 

#change Total_follow_up_period(m) to Total_follow_up_period because brackets could give problems with the code
colnames(metadata_csv_clean_stand)[colnames(metadata_csv_clean_stand) == "Total_follow_up_period_(m)"] <- "Total_follow_up_period" 
metadata_csv_clean_stand %>% 

#removal of all rows with 2 tumors, because this gives a problem in the column of the diameter of the tumors, where these diameters are shown with a + in between. Since only 7 patients have 2 tumors of the 101 patients in this dataset, these can be removed.
metadata_csv_clean_stand <- metadata_csv_clean_stand[metadata_csv_clean_stand$Tumor_number == 1, ] 

#Removal of columns with only 1 value
metadata_csv_clean <- metadata_csv_raw %>% select(-HCV, -Lymphatic_metastasis, -Macrovascular_invasion, -Profiling_data_QC_status, -HBV, -BCLC)

#Change gender and other 0-1's to factor: HBV, liver cirrhosis, MVI, AFP, recurr_status, survival_status, BCLC_stage
metadata_csv_clean$Gender <- as.factor(metadata_csv_clean$Gender) 
metadata_csv_clean$Liver_cirrhosis <- as.factor(metadata_csv_clean$Liver_cirrhosis) 
metadata_csv_clean$MVI <- as.factor(metadata_csv_clean$MVI) 
metadata_csv_clean$AFP <- as.factor(metadata_csv_clean$AFP) 
metadata_csv_clean$Recurr_status <- as.factor(metadata_csv_clean$Recurr_status) 
metadata_csv_clean$Survival_status <- as.factor(metadata_csv_clean$Survival_status) 

str(metadata_csv_clean) 

abundances_tsv_clean <- abundances_tsv_raw 
```


Removal of missing data from metadata
```{r}
#MCAR: little's MCAR test 
mcar_test_result <- naniar::mcar_test(metadata_csv_clean) 
print(mcar_test_result) #result suggest MCAR (p-value 0.08366846)  
#deletion because the missing data is MCAR and not a lot of missing values 


#Removing NA values (missing values)
metadata_csv_clean <- metadata_csv_clean[!is.na(metadata_csv_clean$Tumor_cellularity), ]
```


Imputation in abundances data
```{r}
# Split into metadata and patient data
abundances_metadata <- abundances_tsv_raw %>% select(c("ID", "Protein.names", "Symbol"))
abundances_patient_data <- abundances_tsv_raw %>% select(-c("ID", "Protein.names", "Symbol"))

#MCAR test for abundances_patient_data
abundances_mcar_test_result <- naniar::mcar_test(abundances_patient_data) 
print(abundances_mcar_test_result) #result suggest MCAR (p-value = 1, far above 0.05)


#Filter columns with too much missing data
list_filtering_metadata <- list()

for (x in 1:nrow(abundances_metadata)) {
  NA_amount_row <- sum(is.na(abundances_patient_data[x,]))
  fractionrowNA <- NA_amount_row/199
  if (fractionrowNA > 0.25) {
    list_filtering_metadata[[x]] <- 1
  } else {
    list_filtering_metadata[[x]] <- 0
  }
    
}

#Check how many of the rows have more than X% data missing
table(unlist(list_filtering_metadata))
#convert list to vector, which you can use to filter the abundances 
vector_filtering_metadata <- unlist(list_filtering_metadata)

#Visual check for filter in abundances
abundances_testing <- abundances_patient_data[vector_filtering_metadata==0, ]
vis_miss(abundances_testing)


#Separate healthy and tumor samples based on column names
abundances_healthy_samples <- abundances_patient_data %>% select(contains("P"))
abundances_tumor_samples <- abundances_patient_data %>% select(contains("T"))


#Function to impute missing values using null imputation
impute_missing <- function(data) {
  data %>% mutate_all(~ ifelse(is.na(.), 0, .))
}

#Apply the imputation to healthy and tumor datasets
abundances_healthy_samples_imputed <- impute_missing(abundances_healthy_samples)
abundances_tumor_samples_imputed <- impute_missing(abundances_tumor_samples)



#Check if the missing data is gone
vis_miss(abundances_healthy_samples_imputed)

dim(abundances_healthy_samples) #confirmation no data is lost
dim(abundances_healthy_samples_imputed) #confirmation no data is lost

#Combine and recombine with metadata
imputed_patient_data <- bind_cols(abundances_healthy_samples_imputed, abundances_tumor_samples_imputed)
abundances_tsv_imputed <- bind_cols(abundances_metadata, imputed_patient_data)

#Filter of abundances imputed tsv
abundances_tsv_imputed_filtered <- abundances_tsv_imputed[vector_filtering_metadata == 0, ]
vis_miss(abundances_tsv_imputed_filtered)

vis_miss(abundances_tsv_imputed)
```

Standardization of data 
```{r}
#Define standardization function
standardize <- function(x) {
    if (sd(x) == 0) {
        return(x)
    } else {
        return((x - mean(x)) / sd(x))
    }
}

#Copy original dataset
abundances_tsv_imputed_stand <- abundances_tsv_imputed_filtered
metadata_csv_clean_stand <- metadata_csv_clean

#Identify numerical columns
numeric_cols_abundances<- sapply(abundances_tsv_imputed_stand, is.numeric)
  # Diameter_of_tumor as numeric
metadata_csv_clean_stand$Diameter_of_tumor <- as.numeric(metadata_csv_clean_stand$Diameter_of_tumor) 
  # Delete rows with NA in Diameter_of_tumor
metadata_csv_clean_stand <- metadata_csv_clean_stand[!is.na(metadata_csv_clean_stand$Diameter_of_tumor), ]
numeric_cols_metadata <- sapply(metadata_csv_clean_stand, is.numeric)

#Apply standardization function on numerical data
abundances_tsv_imputed_stand[, numeric_cols_abundances] <- lapply(abundances_tsv_imputed_filtered[, numeric_cols_abundances], standardize)
metadata_csv_clean_stand[, numeric_cols_metadata] <- lapply(metadata_csv_clean_stand[, numeric_cols_metadata], standardize)


#Check first rows dataset
head(abundances_tsv_imputed_stand)
head(metadata_csv_clean_stand)
```

Data visualization (distributions)
```{r}
#Age in density plot 
metadata_csv_clean_stand %>% 
  ggplot(aes(x=age))+ 
  geom_density(color="darkblue", fill = "darkblue", alpha=0.5)+ 
  theme_classic()+ 
  scale_x_continuous(expand= c(0,0))+ 
  scale_y_continuous(expand= c(0,0)) 
#Age in boxpot to detect outliers  
metadata_csv_clean_stand %>% 
  ggplot(aes(x = "", y = age)) + 
  geom_boxplot(color = "darkblue", fill = "lightblue", alpha = 0.5) + 
  theme_classic() 
##There are two outliers detected of two people who are 24 and 25 years old, but this data will not be excluded because it might still be relevant.


#Tumor diameter in density plot.
metadata_csv_clean_stand %>% 
  ggplot(aes(x = Diameter_of_tumor)) +   
  geom_density(color = "darkblue", fill = "darkblue", alpha = 0.5) +   
  theme_classic()  
#Diameter of tumor in boxplot to detect outliers 
metadata_csv_clean_stand %>% 
  ggplot(aes(x = "", y = Diameter_of_tumor)) + 
  geom_boxplot(color = "darkblue", fill = "lightblue", alpha = 0.5) + 
  theme_classic() 
#There are no outliers detected for the diameter of the tumor.  


#AFP (ng/ml) in density plot 
metadata_csv_clean_stand %>% 
  ggplot(aes(x=AFPcontinuous))+ 
  geom_density(color="darkblue", fill= "darkblue", alpha=0.5)+ 
  theme_classic() 
#AFPcontinuous in boxplot to detect outliers 
metadata_csv_clean_stand %>% 
  ggplot(aes(x = "", y = AFPcontinuous)) + 
  geom_boxplot(color = "darkblue", fill = "lightblue", alpha = 0.5) + 
  theme_classic() 
#There are 10 outliers detected, but this data will not be removed, because this column has a very big range of values. These outliers might therefore be important in the dataset.

#Disease free survival in density plot 
metadata_csv_clean_stand %>% 
  ggplot(aes(x=Disease_free_survival))+ 
  geom_density(color="darkblue", fill = "darkblue", alpha=0.5)+ 
  theme_classic()+ 
  scale_x_continuous(expand= c(0,0))+ 
  scale_y_continuous(expand= c(0,0)) 
#Disease free survival in boxplot to detect outliers 
metadata_csv_clean_stand %>% 
  ggplot(aes(x = "", y = Disease_free_survival)) + 
  geom_boxplot(color = "darkblue", fill = "lightblue", alpha = 0.5) + 
  theme_classic() 
#There are no outliers detected 

#Total follow-up period in density plot 
metadata_csv_clean_stand %>% 
  ggplot(aes(x=Total_follow_up_period))+ 
  geom_density(color="darkblue", fill="darkblue", alpha=0.5)+ 
  theme_classic()+ 
  scale_x_continuous(expand= c(0,0))+ 
  scale_y_continuous(expand= c(0,0)) 
#Total follow-up period in boxplot to detect outliers 
metadata_csv_clean_stand %>% 
  ggplot(aes(x = "", y = Total_follow_up_period)) + 
  geom_boxplot(color = "darkblue", fill = "lightblue", alpha = 0.5) + 
  theme_classic() 
#There is one outlier detected 

#Tumor cellularity
metadata_csv_clean_stand %>% 
  ggplot(aes(x =Tumor_cellularity)) + 
  geom_histogram(binwidth = 0.05, color = "darkblue", fill = "darkblue", alpha = 0.5) + 
  theme_classic() 
#Tumor cellularity in boxplot to detect outliers 
metadata_csv_clean_stand %>% 
  ggplot(aes(x = "", y = Tumor_cellularity)) + 
  geom_boxplot(color = "darkblue", fill = "lightblue", alpha = 0.5) + 
  theme_classic() 
#There are three outliers detected.

#Proteomic subtype
metadata_csv_clean_stand %>% 
  ggplot(aes(x = Proteomic_Subtype)) + 
  geom_bar(color = "darkblue", fill = "darkblue", alpha = 0.5) + 
  theme_classic() 

#Proteomic subtype per age 
metadata_csv_clean_stand %>% 
  ggplot(aes(x = age)) + 
  geom_density(color = "darkblue", fill = "darkblue", alpha = 0.5) + 
  theme_classic() + 
  facet_wrap(~ Proteomic_Subtype) 
```

Removing outliers 
```{r} 
#Removing outliers for the tumor cellularity 
#Step 1: Calculate IQR and identify outliers  
Q1 <- quantile(metadata_csv_clean_stand$Tumor_cellularity, 0.25, na.rm = TRUE) 
Q3 <- quantile(metadata_csv_clean_stand$Tumor_cellularity, 0.75, na.rm = TRUE) 
IQR_value <- Q3 - Q1 

#Step 2: Define outlier thresholds 
lower_bound <- Q1 - 1.5 * IQR_value 
upper_bound <- Q3 + 1.5 * IQR_value 

#Step 3: Filter the data to remove outliers 
metadata_csv_clean_stand_no_outliers <- metadata_csv_clean_stand %>% 
  filter(Tumor_cellularity >= lower_bound & Tumor_cellularity <= upper_bound) 

#Step 4: Plot the boxplot without outliers 
metadata_csv_clean_stand_no_outliers %>% 
  ggplot(aes(x = "", y = Tumor_cellularity)) + 
  geom_boxplot(color = "darkblue", fill = "lightblue", alpha = 0.5) + 
  theme_classic() 
``` 


Hypothesis 1
Making a correlation matrix to see which parameters are correlated with each other
```{r}
numeric_vars <- sapply(metadata_csv_clean_no_outliers, is.numeric) # Identify numeric variables
correlation_matrix <- cor(metadata_csv_clean_no_outliers[numeric_vars], use="pairwise.complete.obs")
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorrplot(correlation_matrix, lab = TRUE, title = "Correlation Matrix", outline.col = "white")
```
This matrix shows that the diameter of the tumor is correlated with AFPcontinuous and MVI. MVI and AFPcontinuous also show a small correlation. Therefore, the influence of the presence of MVI and the concentration of AFP is tested on the diameter of the tumor. 

H0: THere is no correlation between MVI and AFPcontinuous on the diameter of the tumor.
H1: There is a correlation between MVI and AFPcontinuous on the diameter of the tumor.

Checking whether a linear regression model can be used for the first hypothesis.
```{r}
#1: Linear correlation = lineair correlation
ggplot(metadata_csv_clean_no_outliers, aes(x = Diameter_of_tumor, y = AFPcontinuous, color = factor(MVI))) + 
  geom_point(size = 3) +              
  labs(title = "Tumor diameter vs AFPcontinuous",                
       x = "Tumor diameter (cm)",                      
       y = "AFP (ng/mL)") +
  scale_color_manual(values = c("orange","green"), labels = c("No MVI", "MVI"))

#Linear correlation with log for AFPcontinuous
ggplot(metadata_csv_clean_no_outliers, aes(x = Diameter_of_tumor, y = log(AFPcontinuous), color = factor(MVI))) + 
  geom_point(size = 3) +              
  labs(title = "Tumor diameter vs log(AFPcontinuous)",                
       x = "Tumor diameter (cm)",                      
       y = "log(AFP (ng/mL))") +
  scale_color_manual(values = c("orange","green"), labels = c("No MVI", "MVI"))

#Linear correlation with log for tumor diameter
ggplot(metadata_csv_clean_no_outliers, aes(x = log(Diameter_of_tumor), y = AFPcontinuous, color = factor(MVI))) + 
  geom_point(size = 3) +              
  labs(title = "log(Tumor diameter) vs AFPcontinuous",                
       x = "log(Tumor diameter (cm))",                      
       y = "AFP (ng/mL)") +
  scale_color_manual(values = c("orange","green"), labels = c("No MVI", "MVI"))

#Linear correlation with log for AFPcontinuous and the tumor diameter
ggplot(metadata_csv_clean_no_outliers, aes(x = log(Diameter_of_tumor), y = log(AFPcontinuous), color = factor(MVI))) + 
  geom_point(size = 3) +              
  labs(title = "log(Tumor diameter) vs log(AFPcontinuous)",                
       x = "log(Tumor diameter (cm))",                      
       y = "log(AFP (ng/mL))") +
  scale_color_manual(values = c("orange","green"), labels = c("No MVI", "MVI"))

#2: Homoscedasticity
#The plot generated for linearity has a funnel shape, so this indicates heteroscedasticity. This is not illogical since the dispersion of AFPcontinuous will be larger with a larger diameter and the dispersion of AFPcontinuous will be smaller with a smaller diameter. 

#Based on linearity and heteroscedasticity, a linear regression model cannot be plotted so we will switch to a glm model.
model <- lm(Diameter_of_tumor ~ AFPcontinuous + MVI, data = metadata_csv_clean_no_outliers)
predictions <- predict(model)
residuals <- residuals(model)

plot(predictions, residuals, main = "Residuals vs Predicted values",
     xlab = "Predicted values",
     ylab = "Residuals",
     pch = 19,
     col = "blue") # Plot the residuals against the predicted values

abline(h = 0, col = "red", lwd = 2) # Ad a horizontal line on y = 0
#In this graph there is definitely a funnel shape present, so the data is heteroscedastic.

#Other way to look at the homoscedasticity 
install.packages("lmtest")
library(lmtest)

bptest(model)
#The Breusch-Pagan test is a formal statistical test for homoscedasticity where the null hypothesis of the test states that there is no heteroscedasticity. 
#In this case the p-value > 0,05, namely 0,6037, so means that the data is heteroscedastic, there is an unequal spread of the data.

#3: Normality of residuals
#Normality of only the tumor diameter (QQplot)
qqnorm(metadata_csv_clean_no_outliers$Diameter_of_tumor, 
       main = "Q-Q Plot: Tumor Diameter",
       xlab = "Theoretical Quantiles",
       ylab = "Sample Quantiles")
qqline(metadata_csv_clean_no_outliers$Diameter_of_tumor, col = "red")

#Second way of visualization of the normality of the tumor diameter (QQplot)
install.packages("ggpubr")
library(ggpubr)
ggqqplot(metadata_csv_clean_no_outliers$Diameter_of_tumor,metadata_csv_clean_no_outliers$Diameter_of_tumor, 
         main = "Q-Q Plot: Tumor Diameter",
         xlab = "Theoretical Quantiles",
         ylab = "Sample Quantiles",
         color = "blue") + theme_minimal()

#Third way of visualizing the normality of the tumor diameter (histogram)
bw <- 0.6
ggplot(metadata_csv_clean_no_outliers, aes(x = Diameter_of_tumor))+
  geom_histogram(binwidth = bw, fill = "lightgrey")+
  stat_function(fun = function(x){dnorm(x, mean = mean(metadata_csv_clean_no_outliers$Diameter_of_tumor),
                                        sd = sd(metadata_csv_clean_no_outliers$Diameter_of_tumor))* bw * length(metadata_csv_clean_no_outliers$Diameter_of_tumor)}, color = "yellow", size = 1)+
  theme_classic()+
  ggtitle("Diameter of tumor")+
  ylab("Abundance")
#Even if the "bw" is changed to different values, the data is never normally distributed. 

#Performing an extra test, the Shapiro-Wilk normality test, to check whether or not the tumor diameter is normally distributed.
shapiro.test(metadata_csv_clean_no_outliers$Diameter_of_tumor)
#The p-value > 0,05, so the null hypothesis cannot be rejected, this mean that the tumor diameter is normally distributed.

#Normality of the whole model, so with parameters tumor diameter, MVI and AFP
model2 <- lm(Diameter_of_tumor ~ AFPcontinuous + MVI, data = metadata_csv_clean_no_outliers)
residuen <- residuals(model2)

qqnorm(residuen)
qqline(residuen, col = "red")

#4: No multicollinearity
model3 <- lm(Diameter_of_tumor ~ AFPcontinuous + MVI, data = metadata_csv_clean_no_outliers)
install.packages("car")
library(car)
vif(model3)
#These values are below the typical threshold of 10, indicating that there is no significant multicollinearity between AFPcontinuous and MVI in your model. This means that both predictors can be used together without causing issues due to collinearity.

#5: Independence of the residuals (auto-correlation)
model4 <- lm(Diameter_of_tumor ~ AFPcontinuous + MVI, data = metadata_csv_clean_no_outliers)
residuals <- residuals(model4)

plot(residuals, 
     main = "Residuals vs. Observation order", 
     xlab = "Observation Number", 
     ylab = "Residuals", 
     pch = 19, 
     col = "blue") #Plot residuals against their order

abline(h = 0, col = "red") #Add a horizontal line on y = 0

#Extra test to check the auto-correlation with the Durbin-Watson test
install.packages("lmtest")
library(lmtest)
dwtest(model)

#The residuals need to be independent, so no pattern or correlation can be seen. After performing the Durbin-Watson test, the p-value is 0,03536, so p-value < 0,05. This means that there is an auto-correlation, because the H0 in this test states that the residuals are independent.
```

Linear regression model cannot be used because four of the five parameters are not fulfilled. The only parameter that is fulfilled is the normal distribution of the tumor diameter. This means that a logistic regression model has to be used to be able to prove significant difference.

Logistic regession model for the tumor diameter, MVI and AFP
```{r}
#Logistic regression model for tumor diameter, AFP and MVI
model5 <- glm(Diameter_of_tumor ~ AFPcontinuous * MVI, 
             family = gaussian(link = "identity"), data = metadata_csv_clean_no_outliers)
summary(model5)
model5$deviance/model5$null.deviance

model6 <- glm(Diameter_of_tumor ~ AFPcontinuous * MVI, 
             family = Gamma(link = "log"), data = metadata_csv_clean_no_outliers) #Betere R squared. Als Diameter_of_tumor alleen positieve waarden heeft en variabiliteit toeneemt met de grootte van de waarde, kun je een Gamma-verdeling proberen.
summary(model6)
model6$deviance/model6$null.deviance
```
The interaction between MVI and AFPcontinuous on the tumor diameter is not significant, because the p-value > 0,05, namely 0,173.



DIFFERENTIAL EXPRESSION ANALYSIS
installation of packages
```{r}
#install bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE)) {
  install.packages("BiocManager")
  BiocManager::install(version = "3.12")}


BiocManager::install("edgeR")
library(edgeR)


library(tibble)
#abundances_test_imputed_stand is latest
# if no standardization needed, use abundances_tsv_imputed_filtered
```

UNPAIRED ANALYSIS
Filter data (tibble conversion to matrix) 
```{r}
#abundances_tsv_imputed filtered is a tibble
#remove protein names and symbol and convert to matrix
abundances_matrix <- as.matrix(column_to_rownames(abundances_tsv_imputed_filtered %>% select(-c("Protein.names", "Symbol")),"ID"))

#make a list with every sample from abundances and then type them according to name, make this a table; then mutate and add P or T based on name
abundances_sample_type_table <-  data.frame(Column_name = colnames(abundances_matrix)) %>%
    mutate(Condition = case_when(
    grepl("P", Column_name) ~ "P",
    grepl("T", Column_name) ~ "T",
    TRUE ~ NA_character_
  ))
```


DGE conversion and normalization
```{r}
abundances_dge <- DGEList(counts = abundances_matrix, group = abundances_sample_type_table$Condition)
abundances_dge_normalized <- calcNormFactors(abundances_dge, method = "TMM")

```

Log transform
```{r}
log_voom_matrix_unpaired <- voom(abundances_dge_normalized)
```


Differential Expression Analysis 
```{r}
#defining design matrix
design_modeled_unpaired <- model.matrix(~0 + Condition, data=abundances_sample_type_table) 

#defining contrast matrix
contrast.matrix_PT <- makeContrasts(contrast1=ConditionP-ConditionT, levels=design_modeled_unpaired)
print(contrast.matrix_PT)


#fitting the expression matrix to linear models
fit <- lmFit(log_voom_matrix_unpaired, design_modeled_unpaired)
#compute contrast
fit_PT <- contrasts.fit(fit, contrast.matrix_PT)
#Bayes statistic of differential expression
fit_PT <- eBayes(fit_PT)
```


Obtaining DEA results table
```{r}
topProt_unpaired <- topTable(fit_PT, coef = 1, number = Inf )

topProt_unpaired

```

Volcanoplot 
```{r}
volcanoplot(fit_PT, coef=1, highlight = 100, names=rownames(fit_PT))
```



PAIRED ANALYSIS
Filter data (tibble conversion to matrix) for pre-processing design matrix + pre-processing step abundances_matrix
```{r}
#abundances_tsv_imputed filtered is a tibble
#remove protein names and symbol and convert to matrix
abundances_matrix <- as.matrix(column_to_rownames(abundances_tsv_imputed_filtered %>% select(-c("Protein.names", "Symbol")),"ID"))

#make a list with every sample from abundances and then type them according to name, make this a table; then mutate and add P or T based on name
abundances_sample_type_table <-  data.frame(Column_name = colnames(abundances_matrix)) %>%
    mutate(Condition = case_when(
    grepl("P", Column_name) ~ "P",
    grepl("T", Column_name) ~ "T",
    TRUE ~ NA_character_
  ))

#add Subject name without P or T to list, then add this list to the table
abundances_sample_list <- as.list(abundances_sample_type_table$Column_name)
abundances_sample_list <- lapply(abundances_sample_list, function(x) gsub("P", "", x))
abundances_sample_list <- lapply(abundances_sample_list, function(x) gsub("T", "", x))
abundances_sample_type_table$Subject <- unlist(abundances_sample_list)


```

DESIGN MATRIX CREATION
Design matrix creation based on abundances_sample_type table
```{r}

#preprocessing step to get abundances_sample_type_table in right order
design_dataframe_paired <- unique(abundances_sample_type_table[, c("Column_name", "Subject", "Condition")])

#assign subject (Without the P or T) and Condition (Patient or Tumor)
Subject <- factor(design_dataframe_paired$Subject)
Condition <- factor(design_dataframe_paired$Condition, levels = c("P","T"))

#design matrix regular using limma user guide
design_matrix_modeled_paired <- model.matrix(~Condition + Subject)

#Contrast designMatrix using chatGPT and limma user guide
design_matrix_PreContrast_paired <- model.matrix(~ 0 + Condition + Subject)
```


ABUNDANCES MATRIX CREATION
- First DGE transform and normalize
- then Log Transform; resulting Voom matrix is abundance matrix

DGE transform and normalization (normalization required for batch effects)
```{r}
#uses abundances matrix we made
abundances_dge <- DGEList(counts = abundances_matrix, group = abundances_sample_type_table$Condition)
abundances_dge_norm <- calcNormFactors(abundances_dge, method = "TMM") 
#possibly use TMM method

```

Log transform
```{r}
log_voom_matrix_paired <- voom(abundances_dge_norm, plot = TRUE)
#this log transforms.

```
Log transform gives us the log_voom_matrix_paired


Turning matrix into DF and Fixing order of log_voom_matrix_paired
```{r}
log_voom_df_expr <- as.data.frame(log_voom_matrix_paired$E) %>%
  rownames_to_column(var = "ID") 

```



Dimensionality reduction quality control (MDS or PCA)
```{r}
color_type <- as.numeric(as.factor(abundances_sample_type_table$Condition))
plotMDS(log_voom_matrix_paired, labels = NULL, pch=20, col=color_type)


legend("topright", 
       legend = levels(as.factor(abundances_sample_type_table$Condition)), 
       col = 1:length(levels(as.factor(abundances_sample_type_table$Condition))), 
       pch = 20, 
       title = "Sample Types")

```
From PCA: the tumor samples seem to be super spread out, indicating that each tumor has very different expression patterns?




Actual DEA fitting
```{r}
#Original Code for non-contrast matrix en resultaat
fitnoncontrast <- lmFit(log_voom_df_expr, design_matrix_modeled_paired)
fitnoncontrast <- eBayes(fitnoncontrast)
resultsnoncontrast <- topTable(fitnoncontrast, coef ="ConditionT", adjust.method = "BH", number = Inf)



#Code for contrast matrix en resultaat
fitcontrast <- lmFit(log_voom_df_expr, design_matrix_PreContrast_paired)
contrast_matrix <- makeContrasts(P_vs_T = ConditionT - ConditionP, levels = design_matrix_PreContrast_paired)
fitcontrast <- contrasts.fit(fitcontrast, contrast_matrix)
fitcontrast <- eBayes(fitcontrast)
resultscontrast <- topTable(fitcontrast, coef = "P_vs_T", adjust.method = "BH", number = Inf)

```
DEA results 
```{r}
resultscontrast
resultsnoncontrast

identical(resultscontrast, resultsnoncontrast)
#supposedly not the same, but seem VERY similar

```


VOLCANOPLOT
```{r}
volcanoplot(fitnoncontrast, coef=1, highlight = 100, names=fitnoncontrast$genes$ID)
volcanoplot(fitcontrast, coef=1, highlight = 100, names=fitcontrast$genes$ID)

#the volcanoplots are different
```


Better looking volcanoplots
```{r}
#volcanoplot for the resultscontrast
resultscontrast %>%
  mutate(labelnames = case_when( (resultscontrast$logFC > 2 | resultscontrast$logFC < -2) & (resultscontrast$adj.P.Val <= 0.05) ~ ID,
                                    TRUE ~ "")) %>%
  mutate(colorsign = case_when( (resultscontrast$logFC > 2 | resultscontrast$logFC < -2) & (resultscontrast$adj.P.Val <= 0.05) ~ "Significant",
                                    TRUE ~ "Insignificant")) %>%
  ggplot(aes(x=logFC, y =-log10(adj.P.Val), label=labelnames, color = colorsign))+
  geom_point(cex=0.2)+
  geom_text(size=2)+
  theme_classic() +
  geom_hline(yintercept = 1.301, color = "lightgray")+
  geom_vline(xintercept = 2, color="lightgray")+
  geom_vline(xintercept = -2, color="lightgray")+
  scale_color_manual(values=c("darkgreen","darkred"))+
  ggtitle("resultscontrast")


#volcanoplot for the resultsnoncontrast
resultsnoncontrast %>%
  mutate(labelnames = case_when( (resultsnoncontrast$logFC > 2 | resultsnoncontrast$logFC < -2) & (resultsnoncontrast$adj.P.Val <= 0.05) ~ ID,
                                    TRUE ~ "")) %>%
  mutate(colorsign = case_when( (resultsnoncontrast$logFC > 2 | resultsnoncontrast$logFC < -2) & (resultsnoncontrast$adj.P.Val <= 0.05) ~ "Significant",
                                    TRUE ~ "Insignificant")) %>%
  ggplot(aes(x=logFC, y =-log10(adj.P.Val), label=labelnames, color = colorsign))+
  geom_point(cex=0.2)+
  geom_text(size=2)+
  theme_classic() +
  geom_hline(yintercept = 1.301, color = "lightgray")+
  geom_vline(xintercept = 2, color="lightgray")+
  geom_vline(xintercept = -2, color="lightgray")+
  scale_color_manual(values=c("darkgreen","darkred"))+
  ggtitle("resultsnoncontrast")
#these two look IDENTICAL, only work with contrast from now on
```
Table for posthoc analysis
Table for posthoc analysis
```{r}
resultscontrast_table_posthoc <- resultscontrast %>%
  mutate(Importance = case_when( (resultscontrast$logFC > 2 | resultscontrast$logFC < -2) & 
                                  (resultscontrast$adj.P.Val <= 0.05) ~ "Important", TRUE ~ "Non-important")) %>%
  filter(Importance == "Important")

#List of important ID's for analysis
resultscontrast_table_posthoc$ID
length(resultscontrast_table_posthoc$ID) #86 singificant proteins

#for the upregulated genes
resultscontrast_table_posthoc_up <- resultscontrast %>%
  mutate(Importance = case_when( (resultscontrast$logFC > 2 ) & 
                                  (resultscontrast$adj.P.Val <= 0.05) ~ "Important", TRUE ~ "Non-important")) %>%
  filter(Importance == "Important")

#for the downregulated genes
resultscontrast_table_posthoc_down <- resultscontrast %>%
  mutate(Importance = case_when( (resultscontrast$logFC < -2) & 
                                  (resultscontrast$adj.P.Val <= 0.05) ~ "Important", TRUE ~ "Non-important")) %>%
  filter(Importance == "Important")


#for printing a list that we can put into enrichR
for (i in 1:nrow(resultscontrast_table_posthoc)) {
  cat(resultscontrast_table_posthoc$ID[i], sep = "\n" )
}

#for upregulated
for (i in 1:nrow(resultscontrast_table_posthoc_up)) {
  cat(resultscontrast_table_posthoc_up$ID[i], sep = "\n" )
}


for (i in 1:nrow(resultscontrast_table_posthoc_down)) {
  cat(resultscontrast_table_posthoc_down$ID[i], sep = "\n" )
}
#took these proteins into https://www.uniprot.org/id-mapping
#converted to Gene name
#downloaded as uncompressed excel file
#copy-pasted the resulting the gene names from this excel file


```


