import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_curve, auc, mean_squared_error
import numpy as np
import matplotlib.pyplot as plt

# File paths
metadata_file_path = r'/kaggle/input/metadata/metadata.csv'
abundances_file_path = r'/kaggle/input/abundances/abundances.xlsx'

# Read data
metadata = pd.read_csv(metadata_file_path)
abundances = pd.read_excel(abundances_file_path)

# Combine datasets
combined_data = pd.concat([metadata, abundances.reset_index()], axis=1)

# Fill missing values with 0
combined_data.fillna(0, inplace=True)

# Remove LxxxP data
patient_columns = [col for col in abundances.columns if col.endswith('P') and col.startswith('L')]
abundances_dropped = abundances.drop(columns=patient_columns)

# Define target variable and features
target = 'Diameter_of_tumor_(cm)'
y = combined_data[target]  # Target variable
X = combined_data[['AFP_(ng/ml)', 'MVI', 'age', 'Tumor_number']]  # Features

# Apply Label Encoding to 'Protein.names' column
label_encoder = LabelEncoder()
X['Protein.names'] = label_encoder.fit_transform(combined_data['Protein.names'])

# Rename columns for better visualization in the feature importance graph
X.rename(columns={
    'AFP_(ng/ml)': 'AFP',
    'MVI': 'MVI',
    'age': 'Age',
    'Tumor_number': 'Tumor Number'
}, inplace=True)

# Function to handle '+' in string and convert to float
def parse_to_float(value):
    try:
        if '+' in str(value):
            numbers = [float(v) for v in value.split('+')]
            return sum(numbers) / len(numbers)
        else:
            return float(value)
    except ValueError:
        return np.nan

# Apply parse_to_float function to the entire dataframe
X = X.applymap(parse_to_float)
y = y.map(parse_to_float)

# Drop rows with NaN values
combined_data = pd.concat([X, y], axis=1)
combined_data.dropna(inplace=True)

# Re-separate X and y after dropping rows with NaN values
X = combined_data.drop(columns=[target])
y = combined_data[target]

# Convert target variable to binary classification (e.g., tumor size > 3 cm is 1, else 0)
y_binary = (y > 3).astype(int)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.25, random_state=42)

# Logistic Regression for binary classification
logistic_model = LogisticRegression(random_state=42)
logistic_model.fit(X_train, y_train)

# Predict probabilities and classifications
y_pred_proba = logistic_model.predict_proba(X_test)[:, 1]
y_pred_logistic = (y_pred_proba >= 0.5).astype(int)

# Evaluate Logistic Regression
accuracy = accuracy_score(y_test, y_pred_logistic)
precision = precision_score(y_test, y_pred_logistic)
recall = recall_score(y_test, y_pred_logistic)

print("Logistic Regression Probability Scores:", y_pred_proba)
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")

# Plot ROC curve
fpr, tpr, _ = roc_curve(y_test, y_pred_proba)
roc_auc = auc(fpr, tpr)

plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

# Linear Regression for tumor diameter prediction
y_continuous = combined_data[target]
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(X, y_continuous, test_size=0.25, random_state=42)

# Train Linear Regression model
regression_model = LinearRegression()
regression_model.fit(X_train_reg, y_train_reg)

# Predict tumor diameter
y_pred_diameter = regression_model.predict(X_test_reg)

print("Linear Regression Predictions for Tumor Diameter:")
print(y_pred_diameter)

# Evaluate Linear Regression with Mean Squared Error
mse = mean_squared_error(y_test_reg, y_pred_diameter)
print(f"Mean Squared Error (Tumor Diameter Prediction): {mse:.2f}")

# Evaluate Linear Regression with R2 Score
r2_score = regression_model.score(X_test_reg, y_test_reg)
print(f"R2 Score (Tumor Diameter Prediction): {r2_score:.2f}")
